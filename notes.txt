To port react with flux to use graphql in API call

SET UP
1.   npm install --save express
2.   create ./graphqlserver.js
3.   setup basic express server to listen on port that will not collide with dev-webpack-server (e.g. 8888)
      If you use ES2015, then you need to start with babel-node
      need to npm install --save babel-cli presets-es2015 for below
      e.g command line babel-node --presets es2015 ./graphqlserver.js (have babel install -g)
4.   npm install --save graphql express-graphql
5.   mount graphql endpoint in the express server
6.   create "data" folder to create "schema.js" file
7.   import graphql objects in schema.js
8.   need to create and export a schema
9.   schema will have query and mutation object types
10.  each query has a name and fields object
11.  make fields be an function that returns an object
12.  each key field has a type and an resolve function! args is optional, more on that later
13.  in express file
      import schema from './data/schema';
      import GraphQLHTTP from express-graphql
14.  make route, convention /graphql
      add GraphQLHTTP as a middleware function with the schema as an object
      optional, and recommended, graphiql: true for interface! go to http://localhost:8888/graphql! ... boom
15.  if array of objects, then you need to make a type, an in the fields of a root level object, the type is the new "type" you created
       e.g movies {type: new GraphQLList(movieType)}
       output will be movies {name, title, etc}
16.  in resolve method for movies, "return" (important) the fetch!
17.  call query from post method!  because get has a url limit, post doesn't
18.  reconfigure web-devserver to use normal express
19.  make public and views directory
